<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixel Jumper</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Press Start 2P', cursive;
            background-color: #1a202c;
            color: #e2e8f0;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
        }
        canvas {
            background-color: #2d3748;
            border-radius: 8px;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2), 0 6px 6px rgba(0,0,0,0.25);
            max-width: 100%;
            max-height: 100vh;
            aspect-ratio: 16 / 9;
        }
        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
        }
        .controls {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        .control-btn {
            background-color: #4a5568;
            color: white;
            border: 2px solid #718096;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            font-size: 1.25rem;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
            transition: all 0.2s ease-in-out;
            user-select: none; /* Prevent text selection on mobile */
        }
        .control-btn:active {
            transform: translateY(2px);
            box-shadow: 0 2px 3px rgba(0,0,0,0.2);
        }
        .message-box {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 2rem 3rem;
            border-radius: 12px;
            text-align: center;
            z-index: 10;
            display: none; /* Initially hidden */
            border: 3px solid #4a5568;
        }
        .message-box h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
        }
        .message-box p {
            font-size: 1rem;
            margin-bottom: 1.5rem;
        }
        .message-box button {
             background-color: #4a5568;
            color: white;
            border: 2px solid #718096;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .message-box button:hover {
            background-color: #2d3748;
        }
    </style>
</head>
<body class="bg-gray-900 flex items-center justify-center h-screen">

    <div class="game-container">
        <div class="text-center mb-4">
            <h1 class="text-4xl">Pixel Jumper</h1>
            <p class="text-lg text-gray-400">Score: <span id="score">0</span></p>
        </div>
        <canvas id="gameCanvas"></canvas>
        <div class="controls" id="mobile-controls">
            <button class="control-btn" id="leftBtn">&lt;</button>
            <button class="control-btn" id="jumpBtn">^</button>
            <button class="control-btn" id="rightBtn">&gt;</button>
        </div>
    </div>

    <div id="messageBox" class="message-box">
        <h2 id="messageTitle"></h2>
        <p id="messageText"></p>
        <button id="messageBtn"></button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');

        // Game state and message box elements
        const messageBox = document.getElementById('messageBox');
        const messageTitle = document.getElementById('messageTitle');
        const messageText = document.getElementById('messageText');
        const messageBtn = document.getElementById('messageBtn');
        
        let score = 0;
        let gameState = 'start'; // 'start', 'playing', 'gameOver'
        let animationFrameId;

        // Player properties
        const player = {
            x: 100,
            y: 200,
            width: 20,
            height: 30,
            dx: 0,
            dy: 0,
            speed: 4,
            jumpPower: 12,
            onGround: false,
            color: '#4299e1'
        };

        // World properties
        const gravity = 0.6;
        let platforms = [];
        let coins = [];

        // Input handling
        const keys = {
            left: false,
            right: false,
            up: false
        };

        function resizeCanvas() {
            const container = canvas.parentElement;
            const aspectRatio = 16 / 9;
            const containerWidth = container.clientWidth;
            const containerHeight = window.innerHeight * 0.7;

            let newWidth = containerWidth;
            let newHeight = newWidth / aspectRatio;

            if (newHeight > containerHeight) {
                newHeight = containerHeight;
                newWidth = newHeight * aspectRatio;
            }
            
            canvas.width = 800; // Keep internal resolution fixed
            canvas.height = 450;
            canvas.style.width = `${newWidth}px`;
            canvas.style.height = `${newHeight}px`;
        }

        function generateLevel() {
            platforms = [];
            coins = [];
            score = 0;
            updateScore();

            // Ground platform
            platforms.push({ x: 0, y: canvas.height - 20, width: canvas.width, height: 20, color: '#4a5568' });
            
            // Generate random platforms
            let platformCount = 10;
            for (let i = 0; i < platformCount; i++) {
                let x = Math.random() * (canvas.width - 120);
                let y = 75 + i * 50 + (Math.random() * 20 - 10);
                if(y > canvas.height - 50) y = canvas.height - 50;
                let width = 80 + Math.random() * 50;
                platforms.push({ x, y, width, height: 15, color: '#718096' });

                // Add a coin above each platform
                if (i > 0) { // Don't add a coin over the starting platform
                    coins.push({ x: x + width / 2 - 7.5, y: y - 25, width: 15, height: 15, collected: false, angle: 0 });
                }
            }
             // Make sure platforms are reachable
            platforms.sort((a,b) => a.y - b.y).reverse(); // Sort from bottom to top
            for(let i=1; i < platforms.length; i++) {
                 platforms[i].x = platforms[i-1].x + (Math.random() * 200 - 100);
                 if(platforms[i].x < 0) platforms[i].x = 0;
                 if(platforms[i].x > canvas.width - platforms[i].width) platforms[i].x = canvas.width - platforms[i].width;
                 
                 // Place coin again
                 coins[i-1].x = platforms[i].x + platforms[i].width / 2 - 7.5;
                 coins[i-1].y = platforms[i].y - 25;
            }
        }
        
        function resetPlayer() {
            player.x = 100;
            player.y = canvas.height - 50; // Start on the ground
            player.dx = 0;
            player.dy = 0;
            player.onGround = false;
        }

        function drawPlayer() {
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);
            // Add a simple "eye" for direction
            ctx.fillStyle = 'white';
            const eyeX = keys.right ? player.x + player.width - 6 : player.x + 2;
            ctx.fillRect(eyeX, player.y + 5, 4, 4);
        }

        function drawPlatforms() {
            platforms.forEach(p => {
                ctx.fillStyle = p.color;
                ctx.fillRect(p.x, p.y, p.width, p.height);
            });
        }

        function drawCoins() {
            coins.forEach(coin => {
                if (!coin.collected) {
                    ctx.save();
                    ctx.translate(coin.x + coin.width / 2, coin.y + coin.height / 2);
                    ctx.rotate(coin.angle);
                    ctx.fillStyle = '#f6e05e'; // Yellow color for coin
                    ctx.fillRect(-coin.width / 2, -coin.height / 2, coin.width, coin.height);
                    ctx.strokeStyle = '#d69e2e';
                    ctx.strokeRect(-coin.width / 2, -coin.height / 2, coin.width, coin.height);
                    ctx.restore();
                    coin.angle += 0.1;
                }
            });
        }
        
        function updateScore() {
            scoreElement.textContent = score;
        }

        function showMessage(title, text, btnText) {
            messageTitle.textContent = title;
            messageText.textContent = text;
            messageBtn.textContent = btnText;
            messageBox.style.display = 'block';
        }

        function hideMessage() {
            messageBox.style.display = 'none';
        }

        function startGame() {
            hideMessage();
            generateLevel();
            resetPlayer();
            gameState = 'playing';
            gameLoop();
        }
        
        function gameOver() {
            gameState = 'gameOver';
            cancelAnimationFrame(animationFrameId);
            showMessage('Game Over!', `Your final score is ${score}.`, 'Restart Game');
        }

        function update() {
            // Player movement
            if (keys.left) player.dx = -player.speed;
            else if (keys.right) player.dx = player.speed;
            else player.dx = 0;

            // Player jump
            if (keys.up && player.onGround) {
                player.dy = -player.jumpPower;
                player.onGround = false;
            }

            // Apply physics
            player.x += player.dx;
            player.dy += gravity;
            player.y += player.dy;
            player.onGround = false;

            // Platform collision
            platforms.forEach(platform => {
                if (player.x < platform.x + platform.width &&
                    player.x + player.width > platform.x &&
                    player.y < platform.y + platform.height &&
                    player.y + player.height > platform.y) {
                    
                    // Check if landing on top
                    if (player.dy > 0 && player.y + player.height - player.dy <= platform.y) {
                       player.y = platform.y - player.height;
                       player.dy = 0;
                       player.onGround = true;
                    }
                }
            });

            // Coin collision
            coins.forEach(coin => {
                if (!coin.collected && 
                    player.x < coin.x + coin.width &&
                    player.x + player.width > coin.x &&
                    player.y < coin.y + coin.height &&
                    player.y + player.height > coin.y) {
                    coin.collected = true;
                    score += 10;
                    updateScore();
                }
            });

            // World boundaries
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;

            // Fall off screen = game over
            if (player.y > canvas.height) {
                gameOver();
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawPlatforms();
            drawCoins();
            drawPlayer();
        }

        function gameLoop() {
            if (gameState !== 'playing') return;
            update();
            draw();
            animationFrameId = requestAnimationFrame(gameLoop);
        }

        // --- Event Listeners ---
        function handleKeyDown(e) {
            if (e.code === 'ArrowLeft') keys.left = true;
            if (e.code === 'ArrowRight') keys.right = true;
            if (e.code === 'Space' || e.code === 'ArrowUp') {
                keys.up = true;
                e.preventDefault(); // Prevent space from scrolling page
            }
        }

        function handleKeyUp(e) {
            if (e.code === 'ArrowLeft') keys.left = false;
            if (e.code === 'ArrowRight') keys.right = false;
            if (e.code === 'Space' || e.code === 'ArrowUp') keys.up = false;
        }

        // Mobile Controls
        const leftBtn = document.getElementById('leftBtn');
        const rightBtn = document.getElementById('rightBtn');
        const jumpBtn = document.getElementById('jumpBtn');

        function setupMobileControls() {
            leftBtn.addEventListener('touchstart', (e) => { e.preventDefault(); keys.left = true; });
            leftBtn.addEventListener('touchend', (e) => { e.preventDefault(); keys.left = false; });
            rightBtn.addEventListener('touchstart', (e) => { e.preventDefault(); keys.right = true; });
            rightBtn.addEventListener('touchend', (e) => { e.preventDefault(); keys.right = false; });
            jumpBtn.addEventListener('touchstart', (e) => { e.preventDefault(); keys.up = true; });
            jumpBtn.addEventListener('touchend', (e) => { e.preventDefault(); keys.up = false; });
        }


        // --- Initialization ---
        window.addEventListener('resize', resizeCanvas);
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);
        
        messageBtn.addEventListener('click', () => {
            if (gameState === 'start' || gameState === 'gameOver') {
                startGame();
            }
        });

        // Initial setup
        resizeCanvas();
        setupMobileControls();
        showMessage('Welcome to Pixel Jumper!', 'Use arrow keys or screen buttons to move and jump. Collect all the coins!', 'Start Game');
    </script>
</body>
</html>
